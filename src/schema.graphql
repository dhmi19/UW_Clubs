# import UserOrderByInput,ClubOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    clubs(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Club!]!
    me: User!
    club(id: ID!): Club!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createClub(data: ClubCreateInput!): Club!
    deleteClub(id: ID!): Club!
    updateClub(id: ID!, data: ClubUpdateInput!): Club!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
    club(clubID: ID!): ClubSubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    term: String!
    program: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input ClubCreateInput {
  id: ID
  name: String!
  description: String!
  numMembers: Int!
}

input ClubUpdateInput {
  name: String
  description: String
  numMembers: Int
}

input CreateCommentInput {
    text: String!
    club: ID! 
    rating: Int!
}

input UpdateCommentInput {
    text: String
    rating: Int
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    clubs: [Club!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Club {
    id: ID!
    name: String!
    rating: Int!
    description: String!
    numMembers: Int!
    founder: User! 
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    club: Club!
    updatedAt: String!
    createdAt: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type ClubSubscriptionPayload {
    mutation: MutationType!
    node: Club
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}